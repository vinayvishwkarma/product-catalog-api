openapi: 3.0.1
info:
  title: Product Catalog API
  description: API for managing products in the catalog
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local Server
paths:
  /api/v1/products/create:
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
  /api/v1/products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
    put:
      summary: Update an existing product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
    delete:
      summary: Delete a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
  /api/v1/products/list:
    get:
      summary: List all products with pagination
      description: Retrieve a paginated list of products.
      parameters:
        - name: page
          in: query
          description: The page number to retrieve (default is 0).
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: The number of items per page (default is 10).
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A paginated list of products.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _embedded:
                    type: object
                    properties:
                      productResponseList:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProductResponse'
                  page:
                    type: object
                    properties:
                      size:
                        type: integer
                      totalElements:
                        type: integer
                      totalPages:
                        type: integer
                      number:
                        type: integer
        '204':
          description: No content available.
components:
  schemas:
    ProductRequest:
      type: object
      required:
        - name
        - price
        - available
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        available:
          type: boolean
    ProductResponse:
      type: object
      required:
        - id
        - name
        - price
        - available
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        available:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
              status:
                type: integer
    ProductNotFound:
      description: Product not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
              status:
                type: integer